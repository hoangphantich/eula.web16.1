{"version":3,"sources":["meteor://ðŸ’»app/packages/okgrow_router-autoscroll/client/hot-code-push.js","meteor://ðŸ’»app/packages/okgrow_router-autoscroll/client/router-autoscroll.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8F;;;;;;;;;;;;;;;;;;ACnfile":"/packages/okgrow_router-autoscroll.js","sourcesContent":["//named reactive-dict are persisted across hot code push\nhcp = new ReactiveDict(\"okgrow-hot-code-push\");\n\nvar fakeStartPromise = {\n  'then': function (actionFn) {\n    //debug(\"scheduled begin and end hook\")\n    hcp.set(\"has-hcp-hook\", true);\n    Reload._onMigrate(function () {\n      try {\n        actionFn()\n      } catch(ex) {;}\n      return [true];\n    });\n    return fakeStartPromise;\n  }\n};\n\nHotCodePush = {\n  start: fakeStartPromise,\n  end: new Promise(function (resolve) {\n    hcp.set(\"has-hcp-hook\", true);\n    window.addEventListener(\"load\", function () {\n      //debug(\"detected window load\")\n      if( hcp.get(\"has-hcp-hook\") ){\n        //debug(\"HotCodePush.end promise resolving\");\n        hcp.set(\"has-hcp-hook\", undefined);\n        resolve(true);\n      }\n    });\n  })\n};\n\nfunction debug(msg) {\n  console.info(msg);\n}\n","RouterAutoscroll = {\n  animationDuration: 200,\n  marginTop: 0\n};\n\nvar backToPosition;\n// Saved positions will survive a hot code push\nvar scrollPositions = new ReactiveDict(\"okgrow-router-autoscroll\");\n\nfunction saveScrollPosition () {\n  scrollPositions.set(window.location.href, $(window).scrollTop());\n}\n\n//TODO use history state so we don't litter\nwindow.onpopstate = function () {\n  backToPosition = scrollPositions.get(window.location.href);\n};\n\n// Scroll to the right place after changing routes. \"The right place\" is:\n// 1. The previous position if we're returning via the back button\n// 2. The element whose id is specified in the URL hash\n// 3. The top of page otherwise\nfunction getScrollToPosition () {\n  if (backToPosition) {\n    var oldPosition = backToPosition;\n    backToPosition = undefined;\n    return oldPosition;\n  }\n\n  var hash = window.location.hash;\n  var $hash;\n  try{\n    //HTML5 allows all kinds of ids, so we can't whitelist characters, only\n    //decide the hash doesn't represent a DOM id if we fail\n    $hash = $(hash);\n  } catch (ex) {\n    $hash = [];\n  }\n\n  if(hash.indexOf('maintainScroll=1') > -1)\n    return undefined;\n\n  if ($hash.length)\n    return $hash.offset().top;\n\n  return 0;\n}\n\n//Do the scroll, after the DOM update so that the position can be correct\nvar scheduleScroll = function () {\n  Tracker.afterFlush(function () {\n    var position = getScrollToPosition();\n    scrollTo(position);\n  });\n};\n\nvar flowScroll = function (newRoute) {\n  if(newRoute.context.pathname.indexOf(\"#\") == -1)\n    scrollTo(0);\n  else\n    scheduleScroll();\n};\n\nfunction ironWhenReady (callFn) {\n  return function () {\n    var self = this;\n    self.next();\n    // XXX in iron, why do we abort if not ready, shouldn't we try once ready?\n    if (self.ready()) callFn();\n  }\n}\n\nfunction scrollTo (position) {\n  $('body,html').animate({\n    scrollTop: position - RouterAutoscroll.marginTop\n  }, RouterAutoscroll.animationDuration);\n}\n\nif (Package['iron:router']) {\n  Package['iron:router'].Router.onRun(ironWhenReady(scheduleScroll));\n  Package['iron:router'].Router.onStop(saveScrollPosition);\n}\n\nif (Package[\"kadira:flow-router\"]) {\n  Package[\"kadira:flow-router\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"kadira:flow-router\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nif (Package[\"kadira:flow-router-ssr\"]) {\n  Package[\"kadira:flow-router-ssr\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"kadira:flow-router-ssr\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nif (Package[\"meteorhacks:flow-router\"]) {\n  Package[\"meteorhacks:flow-router\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"meteorhacks:flow-router\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nif (Package[\"meteorhacks:flow-router-ssr\"]) {\n  Package[\"meteorhacks:flow-router-ssr\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"meteorhacks:flow-router-ssr\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nHotCodePush.start.then(function () {\n  var currentScroll = $(window).scrollTop();\n  scrollPositions.set(\"HotCodePushScrollPosition\", currentScroll);\n});\n\nHotCodePush.end.then(function () {\n  backToPosition = scrollPositions.get(\"HotCodePushScrollPosition\");\n  if (backToPosition) {\n    scheduleScroll();\n  }\n});\n\nRouterAutoscroll.scrollPositions = scrollPositions;\n"]}